input {
    jdbc {
        # mysql相关jdbc配置
        jdbc_connection_string => "jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=false"
        jdbc_user => "root"
        jdbc_password => "123456"

        # jdbc连接mysql驱动的文件目录，可去官网下载:https://dev.mysql.com/downloads/connector/j/
        jdbc_driver_library => "/usr/share/logstash/config/mysql-connector-java-5.1.47.jar"
        # the name of the driver class for mysql
        jdbc_driver_class => "com.mysql.jdbc.Driver"
        jdbc_paging_enabled => true
        jdbc_page_size => "1000"

        jdbc_default_timezone =>"Asia/Shanghai"

        # mysql文件, 也可以直接写SQL语句在此处，如下：
        statement => "select * from test where update_time >= :sql_last_value"
        # statement_filepath => "./config/jdbc.sql"

        # 这里类似crontab,可以定制定时操作，比如每分钟执行一次同步(分 时 天 月 年)
        schedule => "* * * * *"
        #type => "jdbc"

        # 是否记录上次执行结果, 如果为真,将会把上次执行到的 tracking_column 字段的值记录下来,保存到 last_run_metadata_path 指定的文件中
        #record_last_run => true

        # 是否需要记录某个column 的值,如果record_last_run为真,可以自定义我们需要 track 的 column 名称，此时该参数就要为 true. 否则默认 track 的是 timestamp 的值.
        use_column_value => true

        # 如果 use_column_value 为真,需配置此参数. track 的数据库 column 名,该 column 必须是递增的. 一般是mysql主键
        tracking_column => "update_time"

        tracking_column_type => "timestamp"

        last_run_metadata_path => "./logstash_capital_bill_last_id"

        # 是否清除 last_run_metadata_path 的记录,如果为真那么每次都相当于从头开始查询所有的数据库记录
        clean_run => false

        #是否将 字段(column) 名称转小写
        lowercase_column_names => false
        tags => ["mysql_test"]
    }
}

output {
    if "mysql_test" in [tags] {
            elasticsearch {
            ssl => true
            cacert => "/usr/share/logstash/certs/ca/ca.crt"
            action => "index"
            index => "logstash_test"
            hosts => ["https://10.1.1.111:9200"]
            user => "elastic"
            password => "asdfgh"
            document_id => "%{id}"
        }

        # 这里输出调试，正式运行时可以注释掉
        stdout {
            codec => json_lines
        }
    }
}