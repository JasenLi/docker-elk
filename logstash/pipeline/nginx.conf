input {
    beats {
        host => "127.0.0.1"
        port => 5044
    }
}
filter {
    if "nginx_access_log" in [tags] {
        grok {
            match => ["message","%{IPORHOST:clientip}\s{1,}\-\s\-\s\[%{HTTPDATE:timestamp}\]\s{1,}\"(?:%{WORD:verb}\s{1,}%{NOTSPACE:request}(?:\s{1,}HTTP/%{NUMBER:http_version})?|-)\" %{NUMBER:response}\s{1,}(?:%{NUMBER:bytes}|-)\s{1,}%{QS:referrer}\s{1,}%{QS:agent}"]
        }
        useragent {
            source => "agent"
            target  => "ua"
        }
        geoip {
            source => "clientip"
            database => "/usr/share/logstash/config/GeoLite2-City.mmdb"
        }
        date {
            match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
            target  => "timestamp"
        }
        mutate {
            convert => {
                "http_version" => "float"
                "bytes" => "integer"
            }
        }
        urldecode {
            all_fields => true
        }
    } else if "nginx_error_log" in [tags] {
        multiline {
            pattern => "^(\d{4}/\d{2}/\d{2}\s{1,}\d{2}:\d{2}:\d{2})"
            negate => true
            what => "previous"
        }
        grok {
            match => [
                "message", "(?<time>\d{4}/\d{2}/\d{2}\s{1,}\d{2}:\d{2}:\d{2})\s{1,}\[%{DATA:err_severity}\]\s{1,}(%{NUMBER:pid:int}#%{NUMBER}:\s{1,}\*%{NUMBER}|\*%{NUMBER}) %{DATA:err_message}(?:,\s{1,}client:\s{1,}(?<client_ip>%{IP}|%{HOSTNAME}))(?:,\s{1,}server:\s{1,}%{IPORHOST:server})(?:, request: %{QS:request})?(?:, host: %{QS:client_ip})?(?:, referrer: \"%{URI:referrer})?",
                "message", "(?<time>\d{4}/\d{2}/\d{2}\s{1,}\d{2}:\d{2}:\d{2})\s{1,}\[%{DATA:err_severity}\]\s{1,}%{GREEDYDATA:err_message}"]
        }
        date {
            match => ["timestamp", "yyyy/MM/dd HH:mm:ss"]
            target => "time"
        }
        urldecode {
            all_fields => true
        }
    } else {
    }
}
output {
    if "nginx_access_log" in [tags] {
        elasticsearch {
            ssl => true
            cacert => "/usr/share/logstash/certs/ca/ca.crt"
            action => "index"
            index => "logstash_nginx_access_logs_%{+YYYY.MM.dd}"
            hosts => ["https://es01:9200"]
            user => "elastic"
            password => "asdfgh"
            manage_template => true
            template_name => "nginx_access"
            template_overwrite => true
            template => "/usr/share/logstash/config/nginx_access.json"
        }
    } else if "nginx_error_log" in [tags] {
        elasticsearch {
            ssl => true
            cacert => "/usr/share/logstash/certs/ca/ca.crt"
            action => "index"
            index => "logstash_nginx_error_logs_%{+YYYY.MM.dd}"
            hosts => ["https://es01:9200"]
            user => "elastic"
            password => "asdfgh"
            manage_template => false
        }
    } else {
    }
}